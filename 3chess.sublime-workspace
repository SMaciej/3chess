{
	"auto_complete":
	{
		"selected_items":
		[
			[
				"opti",
				"optionsInterface	function"
			],
			[
				"prev",
				"prevTurn"
			],
			[
				"kill",
				"killed_chessmen"
			],
			[
				"ches",
				"chessmen_list	statement"
			],
			[
				"print",
				"printConsole	function"
			],
			[
				"console",
				"console_text	statement"
			],
			[
				"pla",
				"playerDisplay"
			],
			[
				"player",
				"playerDisplay	statement"
			],
			[
				"gre",
				"grey"
			],
			[
				"rookr",
				"rookr"
			],
			[
				"x",
				"x	forflow"
			],
			[
				"backgr",
				"background-repeat"
			],
			[
				"backgro",
				"background-image"
			],
			[
				"refe",
				"referral"
			],
			[
				"User",
				"User"
			],
			[
				"ref",
				"ref_id	statement"
			],
			[
				"HttpR",
				"HttpResponseRedirect	class"
			],
			[
				"s",
				"setDisplay"
			]
		]
	},
	"buffers":
	[
		{
			"contents": "# 3chess\n# -*- coding: UTF-8 -*-\n# by Maciej Sobolewski\n\nimport pygame\nimport sys\nimport random\nimport pickle\nimport time\nfrom pygame.locals import *\n\n\npygame.init()\n\n\n# Colours definitions:\nwhite = (240,240,240)\nblack = (0,0,0)\ngrey = (89,99,99)\n\n# Globals definitions:\nfps = 25\nres_x = 1280\nres_y = 960\ndebug_mode = True\nlang = 'polish'\nsquare = {} # Definitions of the board's squares.\nalphabet_codes = {1:'A', 2:'B', 3:'C', 4:'D', 5:'E', 6:'F', 7:'G', 8:'H', 9:'I', 10:'J', 11:'K', 12:'L'}\nchosen = False  # False, when there is no chessman chosen.\nhistory = []  # History of moves.\nchessmen_list = []  # Chessmen list.\nkilled_chessmen = [] # Captured chessmen list.\nout = ''\n\n\n# Functions definitions:\n\ndef newGame():\n    \"\"\"Resets globals, objects and runs basic starting functions.\"\"\"\n\n    global square, chosen, history, chessmen_list, killed_chessmen\n\n    square = {} # Definitions of the board's squares.\n    chosen = False  # False, when there is no chessman chosen.\n    history = []  # History of moves.\n    chessmen_list = []  # Chessmen list.\n    killed_chessmen = [] # Captured chessmen list.\n    out = ''\n\n    defineLanguages() # Define language dictionaries.\n    testResolutionConfig() # Config resoultion.\n    createChessmen() # Create chessmen.\n\ndef defineLanguages():\n    \"\"\"Defines language dictionaries.\"\"\"\n\n    global ld, turn\n\n    ld = {\n        'english': {'white':'white', 'crimson':'crimson', 'green':'green', 'pawn':'pawn', 'knight':'knight', 'bishop':'bishop', 'rook':'rook', 'queen':'queen', 'king':'king', 'to':'to', 'killed':'captures', 'on':'on', 'its':\"It's\", 'turn':'turn', 'start':'Start.', 'prevTurn':'Moving to previous turn.', 'resolution':'Resolution', 'options': 'Options', 'language':'Language', 'back':'Back', 'undo':'Undo', 'save':'Save', 'load':'Load', 'english': 'English', 'polish':'Polish'},\n        'polish': {'white':'bialy', 'crimson':'czerwony', 'green':'zielony', 'pawn':'pionek', 'knight':'skoczek', 'bishop':'goniec', 'rook':'wieza', 'queen':'dama', 'king':'krol', 'to':'do', 'killed':'zbija', 'on':'na', 'its':\"Gracz\", 'turn':'wykonuje ruch', 'start':'Start.', 'prevTurn':'Cofam ture.', 'resolution':'Rozdzielczosc', 'options': 'Opcje', 'language':'Jezyk', 'back':'Wstecz', 'undo':'Cofnij', 'save':'Zapisz', 'load':'Wczytaj', 'english': 'Angielski', 'polish':'Polski'}\n    }\n\n    turn = 'white' # Set first turn.\n\ndef testResolutionConfig():\n    \"\"\"Checks if config for actual resolution was set. If not, generates it.\"\"\"\n\n    try: \n        test = open('res_conf/' + str(res_x) + 'x' + str(res_y) + '.res', 'r')\n        test.close()\n        loadSquare()\n        print 'Res config file loaded.'\n    except:\n        findSquaresCoord()\n        saveSquare()\n        print 'Res config file generated.'\n\ndef createChessmen():\n    \"\"\"Creates chessmen.\"\"\"\n\n\n    pawng1 = Chessman('green', 'pawn', 'img/chessmen/pawng.png', 'L11')\n    pawng2 = Chessman('green', 'pawn', 'img/chessmen/pawng.png', 'K11')\n    pawng3 = Chessman('green', 'pawn', 'img/chessmen/pawng.png', 'J11')\n    pawng4 = Chessman('green', 'pawn', 'img/chessmen/pawng.png', 'I11')\n    pawng5 = Chessman('green', 'pawn', 'img/chessmen/pawng.png', 'E11')\n    pawng6 = Chessman('green', 'pawn', 'img/chessmen/pawng.png', 'F11')\n    pawng7 = Chessman('green', 'pawn', 'img/chessmen/pawng.png', 'G11')\n    pawng8 = Chessman('green', 'pawn', 'img/chessmen/pawng.png', 'H11')\n    rookg1 = Chessman('green', 'rook', 'img/chessmen/rookg.png', 'L12')\n    rookg2 = Chessman('green', 'rook', 'img/chessmen/rookg.png', 'H12')\n    knightg1 = Chessman('green', 'knight', 'img/chessmen/knightg.png', 'K12')\n    knightg2 = Chessman('green', 'knight', 'img/chessmen/knightg.png', 'G12')\n    bishopg1 = Chessman('green', 'bishop', 'img/chessmen/bishopg.png', 'F12')\n    bishopg2 = Chessman('green', 'bishop', 'img/chessmen/bishopg.png', 'J12')\n    queeng = Chessman('green', 'queen', 'img/chessmen/queeng.png', 'E12')\n    kingg = Chessman('green', 'king', 'img/chessmen/kingg.png', 'I12')\n\n    pawnw1 = Chessman('white', 'pawn', 'img/chessmen/pawnw.png', 'A2')\n    pawnw2 = Chessman('white', 'pawn', 'img/chessmen/pawnw.png', 'B2')\n    pawnw3 = Chessman('white', 'pawn', 'img/chessmen/pawnw.png', 'C2')\n    pawnw4 = Chessman('white', 'pawn', 'img/chessmen/pawnw.png', 'D2')\n    pawnw5 = Chessman('white', 'pawn', 'img/chessmen/pawnw.png', 'E2')\n    pawnw6 = Chessman('white', 'pawn', 'img/chessmen/pawnw.png', 'F2')\n    pawnw7 = Chessman('white', 'pawn', 'img/chessmen/pawnw.png', 'G2')\n    pawnw8 = Chessman('white', 'pawn', 'img/chessmen/pawnw.png', 'H2')\n    rookw1 = Chessman('white', 'rook', 'img/chessmen/rookw.png', 'A1')\n    rookw2 = Chessman('white', 'rook', 'img/chessmen/rookw.png', 'H1')\n    knightw1 = Chessman('white', 'knight', 'img/chessmen/knightw.png', 'B1')\n    knightw2 = Chessman('white', 'knight', 'img/chessmen/knightw.png', 'G1')\n    bishopw1 = Chessman('white', 'bishop', 'img/chessmen/bishopw.png', 'C1')\n    bishopw2 = Chessman('white', 'bishop', 'img/chessmen/bishopw.png', 'F1')\n    queenw = Chessman('white', 'queen', 'img/chessmen/queenw.png', 'D1')\n    kingw = Chessman('white', 'king', 'img/chessmen/kingw.png', 'E1')\n\n    pawnr1 = Chessman('crimson', 'pawn', 'img/chessmen/pawnr.png', 'A7')\n    pawnr2 = Chessman('crimson', 'pawn', 'img/chessmen/pawnr.png', 'B7')\n    pawnr3 = Chessman('crimson', 'pawn', 'img/chessmen/pawnr.png', 'C7')\n    pawnr4 = Chessman('crimson', 'pawn', 'img/chessmen/pawnr.png', 'D7')\n    pawnr5 = Chessman('crimson', 'pawn', 'img/chessmen/pawnr.png', 'I7')\n    pawnr6 = Chessman('crimson', 'pawn', 'img/chessmen/pawnr.png', 'J7')\n    pawnr7 = Chessman('crimson', 'pawn', 'img/chessmen/pawnr.png', 'K7')\n    pawnr8 = Chessman('crimson', 'pawn', 'img/chessmen/pawnr.png', 'L7')\n    rookr1 = Chessman('crimson', 'rook', 'img/chessmen/rookr.png', 'A8')\n    rookr2 = Chessman('crimson', 'rook', 'img/chessmen/rookr.png', 'L8')\n    knightr1 = Chessman('crimson', 'knight', 'img/chessmen/knightr.png', 'B8')\n    knightr2 = Chessman('crimson', 'knight', 'img/chessmen/knightr.png', 'K8')\n    bishopr1 = Chessman('crimson', 'bishop', 'img/chessmen/bishopr.png', 'J8')\n    bishopr2 = Chessman('crimson', 'bishop', 'img/chessmen/bishopr.png', 'C8')\n    queenr = Chessman('crimson', 'queen', 'img/chessmen/queenr.png', 'I8')\n    kingr = Chessman('crimson', 'king', 'img/chessmen/kingr.png', 'D8')\n\n#def findSquaresCoordOld():\n    \"\"\"THAT WAS AN EXPERIMENTAL FUNCTION THAT DEGRADED PERFORMANCE. Defines square codes. Finds and assigns squares coordinates.\"\"\"\n\n    for l, i in ((c,d) for c in range(1, 13) for d in range(1, 13)): # Iterate through all possible squares (A1, A2, ..., L12 etc.).\n        square[alphabet_codes[l] + str(i)] = [str((l*10, i*10, 0, 255)),None,alphabet_codes[l] + str(i)] # First place in this list is for a colour, second is reserved for position, third one is just a name.\n\n    x = 0\n    y = 0\n    \n    while x < res_y:\n        while y < res_y:\n            colour = str(board_colour.get_at((x,y))) # Check colour of selected coordinates.\n            for l, i in ((c,d) for c in range(1, 13) for d in range(1, 13)): # Iterate through all possible squares (A1, A2, ..., L12 etc.).\n                square_item = square[alphabet_codes[l] + str(i)] # Just a shortcut.\n                if colour == square_item[0] and square_item[1] == None: # Only continue if the selected colour is the same as square (eg. A1) colour and if our item is still not assigned.\n                    square_item[1] = (x, y) # Assign coordinates to a square.\n                    print alphabet_codes[l] + str(i)\n                    # You can add \"skips\" here, for faster searching (ex. x and y += 10).\n            y += 3\n        y = 0\n        x += 3\n\ndef findSquaresCoord():\n    \"\"\"Defines square codes. Finds and assigns squares coordinates.\"\"\"\n\n    for l, i in ((c,d) for c in range(1, 13) for d in range(1, 13)): # Iterate through all the possible squares (A1, A2, ..., L12 etc.).\n        square[alphabet_codes[l] + str(i)] = [str((l*10, i*10, 0, 255)),None,alphabet_codes[l] + str(i)] # First place in this list is for a colour, second is reserved for a position, third one is just a name.\n\n    square['L9'][1] = (round(res_y/2.021052632, 0), round(res_y/4.923076923, 0))\n    square['K9'][1] = (round(res_y/2.004175365, 0), round(res_y/3.720930233, 0))\n    square['J9'][1] = (round(res_y/1.983471074, 0), round(res_y/3.037974684, 0))\n    square['I9'][1] = (round(res_y/1.951219512, 0), round(res_y/2.546419098, 0))\n    square['E9'][1] = (round(res_y/1.832061069, 0), round(res_y/2.258823529, 0))\n    square['F9'][1] = (round(res_y/1.681260946, 0), round(res_y/2.082429501, 0))\n    square['G9'][1] = (round(res_y/1.55088853, 0), round(res_y/1.939393939, 0))\n    square['H9'][1] = (round(res_y/1.432835821, 0), round(res_y/1.811320755, 0))\n\n    square['L10'][1] = (round(res_y/1.825095057, 0), round(res_y/5.78313253, 0))\n    square['K10'][1] = (round(res_y/1.7777777785, 0), round(res_y/4.304932735, 0))\n    square['J10'][1] = (round(res_y/1.742286751, 0), round(res_y/3.428571429, 0))\n    square['I10'][1] = (round(res_y/1.699115044, 0), round(res_y/2.865671642, 0))\n    square['E10'][1] = (round(res_y/1.621621622, 0), round(res_y/2.5, 0))\n    square['F10'][1] = (round(res_y/1.511811024, 0), round(res_y/2.269503546, 0))\n    square['G10'][1] = (round(res_y/1.418020679, 0), round(res_y/2.073434125, 0))\n    square['H10'][1] = (round(res_y/1.33148405, 0), round(res_y/1.92, 0))\n\n    square['L11'][1] = (round(res_y/1.660899654, 0), round(res_y/7.058823529, 0))\n    square['K11'][1] = (round(res_y/1.608040201, 0), round(res_y/5.052631579, 0))\n    square['J11'][1] = (round(res_y/1.555915721, 0), round(res_y/3.966942149, 0))\n    square['I11'][1] = (round(res_y/1.507064364, 0), round(res_y/3.265306122, 0))\n    square['E11'][1] = (round(res_y/1.43928036, 0), round(res_y/2.815249267, 0))\n    square['F11'][1] = (round(res_y/1.369472183, 0), round(res_y/2.493506494, 0))\n    square['G11'][1] = (round(res_y/1.300813008, 0), round(res_y/2.242990654, 0))\n    square['H11'][1] = (round(res_y/1.243523316, 0), round(res_y/2.038216561, 0))\n\n    square['L12'][1] = (round(res_y/1.526232114, 0), round(res_y/9.056603774, 0))\n    square['K12'][1] = (round(res_y/1.461187215, 0), round(res_y/6.193548387, 0))\n    square['J12'][1] = (round(res_y/1.40556369, 0), round(res_y/4.682926829, 0))\n    square['I12'][1] = (round(res_y/1.352112676, 0), round(res_y/3.80952381, 0))\n    square['E12'][1] = (round(res_y/1.302578019, 0), round(res_y/3.2, 0))\n    square['F12'][1] = (round(res_y/1.251629726, 0), round(res_y/2.766570605, 0))\n    square['G12'][1] = (round(res_y/1.206030151, 0), round(res_y/2.430379747, 0))\n    square['H12'][1] = (round(res_y/1.165048544, 0), round(res_y/2.176870748, 0))\n\n    square['A1'][1] = (round(res_y/3.720930233, 0), round(res_y/1.271523179, 0))\n    square['B1'][1] = (round(res_y/3.076923077, 0), round(res_y/1.271523179, 0))\n    square['C1'][1] = (round(res_y/2.601626016, 0), round(res_y/1.271523179, 0))\n    square['D1'][1] = (round(res_y/2.269503546, 0), round(res_y/1.271523179, 0))\n    square['E1'][1] = (round(res_y/2.004175365, 0), round(res_y/1.271523179, 0))\n    square['F1'][1] = (round(res_y/1.804511278, 0), round(res_y/1.271523179, 0))\n    square['G1'][1] = (round(res_y/1.629881154, 0), round(res_y/1.271523179, 0))\n    square['H1'][1] = (round(res_y/1.488372093, 0), round(res_y/1.271523179, 0))\n    \n    square['A2'][1] = (round(res_y/3.720930233, 0), round(res_y/1.381294964, 0))\n    square['B2'][1] = (round(res_y/3.076923077, 0), round(res_y/1.407624633, 0))\n    square['C2'][1] = (round(res_y/2.601626016, 0), round(res_y/1.432835821, 0))\n    square['D2'][1] = (round(res_y/2.269503546, 0), round(res_y/1.454545455, 0))\n    square['E2'][1] = (round(res_y/2.004175365, 0), round(res_y/1.454545455, 0))\n    square['F2'][1] = (round(res_y/1.804511278, 0), round(res_y/1.432835821, 0))\n    square['G2'][1] = (round(res_y/1.629881154, 0), round(res_y/1.407624633, 0))\n    square['H2'][1] = (round(res_y/1.488372093, 0), round(res_y/1.381294964, 0))\n    \n    square['A3'][1] = (round(res_y/3.720930233, 0), round(res_y/1.509433962, 0))\n    square['B3'][1] = (round(res_y/3.076923077, 0), round(res_y/1.555915721, 0))\n    square['C3'][1] = (round(res_y/2.601626016, 0), round(res_y/1.613445378, 0))\n    square['D3'][1] = (round(res_y/2.269503546, 0), round(res_y/1.672473868, 0))\n    square['E3'][1] = (round(res_y/2.004175365, 0), round(res_y/1.672473868, 0))\n    square['F3'][1] = (round(res_y/1.804511278, 0), round(res_y/1.613445378, 0))\n    square['G3'][1] = (round(res_y/1.629881154, 0), round(res_y/1.555915721, 0))\n    square['H3'][1] = (round(res_y/1.488372093, 0), round(res_y/1.509433962, 0))\n\n    square['A4'][1] = (round(res_y/3.720930233, 0), round(res_y/1.660899654, 0))\n    square['B4'][1] = (round(res_y/3.076923077, 0), round(res_y/1.74863388, 0))\n    square['C4'][1] = (round(res_y/2.609626016, 0), round(res_y/1.846153846, 0))\n    square['D4'][1] = (round(res_y/2.269503546, 0), round(res_y/1.947261663, 0))\n    square['E4'][1] = (round(res_y/2.004175365, 0), round(res_y/1.947261663, 0))\n    square['F4'][1] = (round(res_y/1.804511278, 0), round(res_y/1.846153846, 0))\n    square['G4'][1] = (round(res_y/1.629881154, 0), round(res_y/1.74863388, 0))\n    square['H4'][1] = (round(res_y/1.488372093, 0), round(res_y/1.666899654, 0))\n\n    square['A8'][1] = (round(res_y/12.307692308, 0), round(res_y/2.162162162, 0))\n    square['B8'][1] = (round(res_y/8.80733945, 0), round(res_y/2.430379747, 0))\n    square['C8'][1] = (round(res_y/6.90647482, 0), round(res_y/2.750716332, 0))\n    square['D8'][1] = (round(res_y/5.714285714, 0), round(res_y/3.189368771, 0))\n    square['I8'][1] = (round(res_y/4.897959184, 0), round(res_y/3.764705882, 0))\n    square['J8'][1] = (round(res_y/4.304932735, 0), round(res_y/4.660194175, 0))\n    square['K8'][1] = (round(res_y/3.870967742, 0), round(res_y/6.114649682, 0))\n    square['L8'][1] = (round(res_y/3.516483516, 0), round(res_y/8.971962617, 0))\n\n    square['A7'][1] = (round(res_y/7.441860465, 0), round(res_y/2.033898305, 0))\n    square['B7'][1] = (round(res_y/5.78313253, 0), round(res_y/2.237762238, 0))\n    square['C7'][1] = (round(res_y/4.729064039, 0), round(res_y/2.493506494, 0))\n    square['D7'][1] = (round(res_y/4.033613445, 0), round(res_y/2.807017544, 0))\n    square['I7'][1] = (round(res_y/3.622641509, 0), round(res_y/3.254237288, 0))\n    square['J7'][1] = (round(res_y/3.356643357, 0), round(res_y/3.93442623, 0))\n    square['K7'][1] = (round(res_y/3.147540984, 0), round(res_y/5.052631579, 0))\n    square['L7'][1] = (round(res_y/2.972136223, 0), round(res_y/7.00729927, 0))\n\n    square['A6'][1] = (round(res_y/5.333333333, 0), round(res_y/1.908548708, 0))\n    square['B6'][1] = (round(res_y/4.285714286, 0), round(res_y/2.082429501, 0))\n    square['C6'][1] = (round(res_y/3.595505618, 0), round(res_y/2.269503546, 0))\n    square['D6'][1] = (round(res_y/3.127035831, 0), round(res_y/2.506527415, 0))\n    square['I6'][1] = (round(res_y/2.840236686, 0), round(res_y/2.857142857, 0))\n    square['J6'][1] = (round(res_y/2.735042735, 0), round(res_y/3.428571429, 0))\n    square['K6'][1] = (round(res_y/2.651933702, 0), round(res_y/4.304932735, 0))\n    square['L6'][1] = (round(res_y/7.441860465, 0), round(res_y/2.033898305, 0))\n\n    square['A5'][1] = (round(res_y/4.120171674, 0), round(res_y/1.807909605, 0))\n    square['B5'][1] = (round(res_y/3.404255319, 0), round(res_y/1.935483871, 0))\n    square['C5'][1] = (round(res_y/2.909090909, 0), round(res_y/2.086956522, 0))\n    square['D5'][1] = (round(res_y/2.53968254, 0), round(res_y/2.258823529, 0))\n    square['I5'][1] = (round(res_y/2.37037037, 0), round(res_y/2.573726542, 0))\n    square['J5'][1] = (round(res_y/2.31884058, 0), round(res_y/3.037974684, 0))\n    square['K5'][1] = (round(res_y/2.285714286, 0), round(res_y/3.75, 0))\n    square['L5'][1] = (round(res_y/2.269503546, 0), round(res_y/4.923076923, 0))\n\ndef saveSquare(name = 'res_conf/' + str(res_x) + 'x'+ str(res_y) + '.res'):\n    \"\"\"Saves square to file. Default name is an actual resolution.\"\"\"\n\n    pickle.dump(square, open(name, 'wb'))\n\ndef loadSquare(name = 'res_conf/' + str(res_x) + 'x' + str(res_y) + '.res'):\n    \"\"\"Loads the square dictionary from a file\"\"\"\n\n    global square\n\n    square = pickle.load(open(name, 'rb'))\n\ndef mouseClick(square, symbol):\n    \"\"\"Defines action for a left mouse click.\"\"\"\n\n    if chosen != True:  # Action, when there is no chessman chosen.\n        for chessman in chessmen_list:\n            if square == chessman.pos:\n                chessman.choose()\n                return\n\n    if chosen == True: # Action, when there is a chosen chessman.\n        for chessman in chessmen_list:\n            if square == chessman.pos:\n                if chessman.state == 'chosen':  # Action, when the player clicks on the chosen chessman again.\n                    return\n                elif chessman.state == 'idle':  # Action, when the player clicks on the actually occupied square.\n                    if chessman.colour == turn: # If the chessman is friendly, choose it.\n                        chessman.choose()\n                    else:                       # If the chessman is an enemy, capture it.\n                        chessman.kill(symbol)\n                        moveChessman(square, symbol, True)\n                    return\n        moveChessman(square, symbol, False)\n\ndef moveChessman(square, symbol, kill):\n    \"\"\"Prepares chessman to move to the desired square. Cycles to the next turn.\"\"\"\n\n    global chosen, out\n\n    for chessman in chessmen_list:\n        if chessman.state == 'chosen':\n            chessman.move(square, symbol)\n            chessman.state = 'idle'\n            chosen = False\n            if kill == False:\n                out += '%s %s' % (ld[lang]['to'], symbol)\n            else:\n                out += '%s %s' % (ld[lang]['on'], symbol)\n            game.printConsole(out)\n            chessman.changeImage(chessman.graphic) # Change image to default.\n            nextTurn()\n            return\n\ndef undoMove():\n    \"\"\"Undo last move.\"\"\"\n\n    # Check if there was a capturing\n    if history[-1].split()[3] == ld[lang]['killed']: # Check if the last entry in history was about capturing.\n\n        for chessman in chessmen_list:\n            if history[-1].split()[7] == chessman.square and chessman.state == 'idle': # Find our attacker.\n                for i in square:\n                    if square[i][2] == history[-1].split()[2]:\n                        chessman.move(square[i][1], history[-1].split()[2]) # Move the attacker to the previous position.\n                break\n\n        for i in square:\n            if square[i][2] == history[-1].split()[7]:\n                chessman = killed_chessmen.pop() # Take the last captured chessman from list.\n                chessman.move(square[i][1], history[-1].split()[7]) # Move it to the previous position.\n                chessman.state = 'idle'\n\n        \n    else:\n        for chessman in chessmen_list:\n            if history[-1].split()[4] == chessman.square: # Find which chessman was moved.\n                for i in square:\n                    if square[i][2] == history[-1].split()[2]:\n                        chessman.move(square[i][1], history[-1].split()[2]) # Move it to the previous location.\n                        break\n    history.pop()\n    prevTurn()\n    return\n\ndef nextTurn():\n    \"\"\"Switches to the next turn\"\"\"\n\n    global turn\n\n    if turn == 'white':\n       turn = 'crimson'\n    elif turn == 'crimson':\n       turn = 'green'\n    elif turn == 'green':\n       turn = 'white'\n    print '%s %s %s.' % (ld[lang]['its'], ld[lang][turn], ld[lang]['turn'])\n\n    return\n\ndef prevTurn():\n    \"\"\"Switches to the previous turn\"\"\"\n\n    global turn\n\n    if turn == 'white':\n       turn = 'green'\n    elif turn == 'crimson':\n       turn = 'white'\n    elif turn == 'green':\n       turn = 'crimson'\n    print '%s %s %s %s.' % (ld[lang]['prevTurn'], ld[lang]['its'], ld[lang][turn], ld[lang]['turn'])\n\n    return\n\n\n# Classes definitions:\nclass Game(object):\n    \"\"\"Main class controling console and game saving/loading.\"\"\"\n\n    #def __init__(self):\n        # game_font = pygame.font.SysFont(\"monospace\", 15)\n        # self.console1 = console_font.render(history[-1], 1, white)\n        # self.console2 = console_font.render(history[-2], 1, white)\n        # self.console3 = console_font.render(history[-3], 1, white)\n        # self.console4 = console_font.render(history[-4], 1, white)\n        # self.console5 = console_font.render(history[-5], 1, white)\n        # self.console6 = console_font.render(history[-6], 1, white)\n        # self.console7 = console_font.render(history[-7], 1, white)\n        # self.console8 = console_font.render(history[-8], 1, white)\n        # self.console9 = console_font.render(history[-9], 1, white)\n        # self.console10 = console_font.render(history[-10], 1, white)\n\n    def displayBoard(self):\n        \"\"\"Display board stuff:\"\"\"\n\n        playerDisplay.blit(board, (0,0))\n        pygame.draw.rect(playerDisplay, black, (res_y, res_y/1.6, 400, res_y/2.642857143))\n\n    def redrawChessmen(self):\n        \"\"\"Redraws all chessmen on the board.\"\"\"\n\n        for chessman in chessmen_list:\n            if chessman.state != 'killed':  \n                playerDisplay.blit(chessman.image, chessman.pos)\n\n    def printConsole(self, text):\n        \"\"\" Prints text.\"\"\"\n\n        history.append(text)\n        print text\n\n        # playerDisplay.blit(self.console1 , (965, 605))\n        # playerDisplay.blit(self.console2 , (965, 615))\n        # playerDisplay.blit(self.console3 , (965, 625))\n        # playerDisplay.blit(self.console4 , (965, 635))\n        # playerDisplay.blit(self.console5 , (965, 645))\n        # playerDisplay.blit(self.console6 , (965, 655))\n        # playerDisplay.blit(self.console7 , (965, 665))\n        # playerDisplay.blit(self.console8 , (965, 675))\n        # playerDisplay.blit(self.console9 , (965, 685))\n        # playerDisplay.blit(self.console10 , (965, 695))\n\n    def saveGame(self):\n        \"\"\"Save game to file.\"\"\"\n\n        #pickle.dump(history, open('games/%s' % time.strftime(\"%c\").replace(' ', '').replace(':', '') , 'wb'))\n        pickle.dump(history, open('games/last_game', 'wb')) # Save history to file.\n        print 'Game saved.'\n\n    def loadGame(self):\n        \"\"\"Load game from file.\"\"\"\n\n        global history\n\n        newGame() # Start new game.\n\n        history = pickle.load(open('games/last_game', 'rb')) # Load history from file.\n\n        for entry in history: # Go through history, entry by entry.\n\n            # Check if there was a capturing\n            if entry.split()[3] == ld[lang]['killed']: # Check if the entry in history was about capturing.\n\n                for chessman in chessmen_list:\n                    if entry.split()[7] == chessman.square and chessman.state == 'idle': # Find captured pawn.\n                        for i in square:\n                            if square[i][2] == entry.split()[7]:\n                                chessman.kill(square[i][2]) # Capture pawn.\n\n                for chessman in chessmen_list:\n                    if entry.split()[2] == chessman.square and chessman.state == 'idle': # Find our attacker.\n                        for i in square:\n                            if square[i][2] == entry.split()[7]:\n                                chessman.move(square[i][1], entry.split()[7]) # Move the attacker.\n                        break\n\n            else:\n                for chessman in chessmen_list:\n                    if entry.split()[2] == chessman.square: # Find which chessman was moved.\n                        for i in square:\n                            if square[i][2] == entry.split()[4]:\n                                chessman.move(square[i][1], entry.split()[4]) # Move it to the previous location.\n                                break\n        return\n\nclass Chessman(object):\n    \"\"\"Chessman information.\"\"\"\n\n    def __init__(self, colour, figure, image, position):\n\n        global chessmen_list\n\n        self.colour = colour\n        self.type = figure\n        self.pos = square[position][1]\n        self.square = square[position][2]\n        self.state = 'idle'\n        self.graphic = image\n        self.changeImage(self.graphic)\n        chessmen_list.append(self)\n\n    def choose(self):\n        \"\"\"Makes chessman chosen.\"\"\"\n\n        global chosen, out\n\n        for chessman in chessmen_list: # Make other chessmen idle.\n            if chessman.state != 'killed':\n                chessman.state = 'idle'\n                chessman.changeImage(chessman.graphic)\n\n        if self.colour == turn:   # Check, if the chosen one is owned by the actual player.\n            out = '%s %s %s ' % (str.capitalize(ld[lang][self.colour]), ld[lang][self.type], self.square)\n            self.state = 'chosen'\n            chosen = True\n            self.changeImage(self.graphic[:-5] + '_chosen.png')\n        return\n\n    def move(self, position, symbol):\n        \"\"\"Moves chessman - changes it's position, blits, and redraw.\"\"\"\n\n        self.pos = position\n        self.square = symbol\n        playerDisplay.blit(board, (0,0))\n        game.redrawChessmen()\n\n    def kill(self, symbol):\n        \"\"\"Kills chessman - moves it to (0,0).\"\"\"\n\n        global out\n\n        self.move((0,0), history[-1])\n        game.redrawChessmen()\n        self.state = 'killed'\n        killed_chessmen.append(self)\n        out += '%s %s %s ' % (ld[lang]['killed'], ld[lang][self.colour], ld[lang][self.type])\n\n    def changeImage(self, image):\n        \"\"\"Changes chessman image file.\"\"\"\n\n        self.image = pygame.image.load(image)\n        self.image = pygame.transform.scale(self.image, (res_y/20, res_y/20)) \n\nclass Interface(object):\n    \"\"\"User interface.\"\"\"\n\n    def __init__(self, type):\n        f = getattr(self, '%sInterface' % type)() # Run function responsible for certain interface.\n\n    def mainInterface(self):\n        \"\"\"Create main user interface.\"\"\"\n\n        self.interface = 'main'\n        playerDisplay.fill(grey)\n        self.title = Caption(res_y + (res_x/67.368421053), res_y/38.4, 'PyChess', res_y/14, white)\n        self.options_button = Button(res_y + (res_x/7.529411765), res_y/1.8, ld[lang]['options'], int(res_y/32), white, 130, 50)\n        self.undo_button = Button(res_y + (res_x/67.368421053), res_y/1.8, ld[lang]['undo'], int(res_y/32), white, 130, 50)\n\n    def optionsInterface(self):\n        \"\"\"Create options interface.\"\"\"\n\n        self.interface = 'options'\n        playerDisplay.fill(grey)\n        self.title = Caption(res_y + (res_x/67.368421053), res_y/38.4, ld[lang]['options'], res_y/14, white)\n        self.save_button = Button(res_y + (res_x/67.368421053), res_y/6, ld[lang]['save'], int(res_y/32), white, 265, 50)\n        self.load_button = Button(res_y + (res_x/67.368421053), res_y/4, ld[lang]['load'], int(res_y/32), white, 265, 50)\n        self.resolution_button = Button(res_y + (res_x/67.368421053), res_y/3, ld[lang]['resolution'], int(res_y/32), white, 265, 50)\n        self.language_button = Button(res_y + (res_x/67.368421053), res_y/2.4, ld[lang]['language'], int(res_y/32), white, 265, 50)\n        self.back_button = Button(res_y + (res_x/67.368421053), res_y/2, ld[lang]['back'], int(res_y/32), white, 265, 50)\n\n    def loadInterface(self):\n        \"\"\"Create interface to load a game.\"\"\"\n\n        self.interface = 'load'\n        playerDisplay.fill(grey)\n        self.title = Caption(res_x/1.358929293, res_y/38.4, 'Load', res_y/12, white)\n\n    def resolutionInterface(self):\n        \"\"\"Create interface to change the resolution\"\"\"\n\n        self.interface = 'resolution'\n        playerDisplay.fill(grey)\n        self.title = Caption(res_y + (res_x/67.368421053), res_y/38.4, ld[lang]['resolution'], res_y/18, white)\n        self.res1_button = Button(res_y + (res_x/67.368421053), res_y/6, 'res1', int(res_y/32), white, 265, 50)\n        self.res2_button = Button(res_y + (res_x/67.368421053), res_y/4, 'res2', int(res_y/32), white, 265, 50)\n        self.res3_button = Button(res_y + (res_x/67.368421053), res_y/3, 'res3', int(res_y/32), white, 265, 50)\n        self.res4_button = Button(res_y + (res_x/67.368421053), res_y/2.4, 'res4', int(res_y/32), white, 265, 50)\n        self.back_button = Button(res_y + (res_x/67.368421053), res_y/2, ld[lang]['back'], int(res_y/32), white, 265, 50)\n\n    def languageInterface(self):\n        \"\"\"Create interface to change the resolution\"\"\"\n\n        self.interface = 'language'\n        playerDisplay.fill(grey)\n        self.title = Caption(res_y + (res_x/67.368421053), res_y/38.4, ld[lang]['language'], res_y/18, white)\n        self.lang1_button = Button(res_y + (res_x/67.368421053), res_y/6, ld[lang]['english'], int(res_y/32), white, 265, 50)\n        self.lang2_button = Button(res_y + (res_x/67.368421053), res_y/4, ld[lang]['polish'], int(res_y/32), white, 265, 50)\n        self.lang3_button = Button(res_y + (res_x/67.368421053), res_y/3, 'res3', int(res_y/32), white, 265, 50)\n        self.lang4_button = Button(res_y + (res_x/67.368421053), res_y/2.4, 'res4', int(res_y/32), white, 265, 50)\n        self.back_button = Button(res_y + (res_x/67.368421053), res_y/2, ld[lang]['back'], int(res_y/32), white, 265, 50)\n\n\nclass Button(Interface):\n    \"\"\"Create single button.\"\"\"\n\n    def __init__(self ,x, y, caption, text_size, colour, size_x, size_y, interface, action):\n        self.x = x\n        self.y = y\n        self.size_x = size_x\n        self.size_y = size_y\n        pygame.draw.rect(playerDisplay, colour, (x, y, size_x, size_y), 2)\n        self.button_font = pygame.font.SysFont(\"Verdana\", text_size)\n        self.text = self.button_font.render(caption, 1, colour)\n        self.intrfce = interface\n        self.function = action\n        playerDisplay.blit(self.text, (x + res_x/200, y + (res_y/192)))\n\n    def checkClick(self, mouse_pos):\n        \"\"\"Check if the button was clicked.\"\"\"\n        if mouse_pos[0] > self.x and mouse_pos[1] > self.y and mouse_pos[0] < self.x + self.size_x and mouse_pos[1] < self.y + self.size_y:\n            return True\n\nclass Caption(Interface):\n    \"\"\"Create a caption.\"\"\"\n\n    def __init__(self, x, y, caption, text_size, colour):\n        self.caption_font = pygame.font.SysFont(\"Verdana\", text_size)\n        self.caption = self.caption_font.render(caption, 1, colour)\n        playerDisplay.blit(self.caption, (x, y))\n\n\n\n# Main function:\ndef runGame():\n    \"\"\" Start game. \"\"\"\n\n    global lang\n\n    while True:\n        \n        # Event definitions:\n        for event in pygame.event.get():\n\n            # Quit event:\n            if event.type == QUIT:\n                pygame.quit()\n                sys.exit()\n\n\n        # Checking mouse click by colour and coordinates:\n        mpos = pygame.mouse.get_pos()\n        for i in square:\n            try:\n                if pygame.mouse.get_pressed()[0] == True and str(board_colour.get_at(mpos)) == square[i][0]:\n                    mouseClick(square[i][1], square[i][2])\n                    break\n            except:\n                if pygame.mouse.get_pressed()[0] == True and user_interface.interface == 'main' and history and user_interface.undo_button.checkClick(mpos):\n                    undoMove()\n                    break\n                if pygame.mouse.get_pressed()[0] == True and user_interface.interface == 'main' and user_interface.options_button.checkClick(mpos):\n                    user_interface.optionsInterface()\n                    break\n                if pygame.mouse.get_pressed()[0] == True and user_interface.interface == 'options' and user_interface.back_button.checkClick(mpos):\n                    user_interface.mainInterface()\n                    break\n                if pygame.mouse.get_pressed()[0] == True and user_interface.interface == 'resolution' and user_interface.back_button.checkClick(mpos):\n                    user_interface.mainInterface()\n                    break\n                if pygame.mouse.get_pressed()[0] == True and user_interface.interface == 'options' and user_interface.resolution_button.checkClick(mpos):\n                    user_interface.resolutionInterface()\n                    break\n                if pygame.mouse.get_pressed()[0] == True and user_interface.interface == 'options' and user_interface.language_button.checkClick(mpos):\n                    user_interface.languageInterface()\n                    break\n                if pygame.mouse.get_pressed()[0] == True and user_interface.interface == 'options' and user_interface.save_button.checkClick(mpos):\n                    game.saveGame()\n                    break\n                if pygame.mouse.get_pressed()[0] == True and user_interface.interface == 'options' and user_interface.load_button.checkClick(mpos):\n                    game.loadGame()\n                    break\n                if pygame.mouse.get_pressed()[0] == True and user_interface.interface == 'language' and user_interface.lang1_button.checkClick(mpos):\n                    lang = 'english'\n                    break\n                if pygame.mouse.get_pressed()[0] == True and user_interface.interface == 'language' and user_interface.lang2_button.checkClick(mpos):\n                    lang = 'polish'\n                    break\n                if pygame.mouse.get_pressed()[0] == True and user_interface.interface == 'language' and user_interface.back_button.checkClick(mpos):\n                    user_interface.mainInterface()\n                    break\n\n\n        # Debug mode:\n        if debug_mode == True:\n            if pygame.mouse.get_pressed()[1] == True:\n                print pygame.mouse.get_pos()\n\n\n        # Display stuff:\n        game.displayBoard()\n        game.redrawChessmen()\n\n        # Update display:\n        pygame.display.update()\n        fpsTime.tick(fps)\n\n\n# Start game:\nwhile True: \n\n    # Set display and technical details:\n    fpsTime = pygame.time.Clock() # Set fps.\n    fpsTime.tick(fps)\n    playerDisplay = pygame.display.set_mode((res_x,res_y)) \n    debugDisplay = pygame.display.set_mode((res_x,res_y))\n    playerDisplay.fill(grey)\n    pygame.display.set_caption('3chess') # Set caption.\n\n    # Load and scale images:\n    board = pygame.image.load('img/board.png')\n    board_colour = pygame.image.load('img/board_colour.png')\n    board = pygame.transform.scale(board, (res_y, res_y)) # Scale board image file.\n    board_colour = pygame.transform.scale(board_colour, (res_y, res_y)) # Scale colour board image file.\n    \n    # Run new game function:\n    newGame()\n\n    # Create main objects:\n    user_interface = Interface('main')\n    game = Game()\n\n    # Run main loop:\n    runGame()",
			"file": "3chess.py",
			"file_size": 34531,
			"file_write_time": 130801350820046320,
			"settings":
			{
				"buffer_size": 34575,
				"line_ending": "Unix"
			}
		},
		{
			"file": "/home/maciej/Downloads/SU29",
			"settings":
			{
				"buffer_size": 835,
				"line_ending": "Unix"
			}
		},
		{
			"file": "TO_DO",
			"settings":
			{
				"buffer_size": 211,
				"line_ending": "Unix"
			}
		}
	],
	"build_system": "Packages/Python/Python.sublime-build",
	"build_system_choices":
	[
		[
			[
				[
					"Packages/Python/Python.sublime-build",
					""
				],
				[
					"Packages/Python/Python.sublime-build",
					"Syntax Check"
				]
			],
			[
				"Packages/Python/Python.sublime-build",
				""
			]
		]
	],
	"build_varint": "",
	"command_palette":
	{
		"height": 392.0,
		"last_filter": "",
		"selected_items":
		[
			[
				"remove",
				"Package Control: Remove Package"
			],
			[
				"install",
				"Package Control: Install Package"
			],
			[
				"control",
				"Package Control: Install Package"
			],
			[
				"package control install",
				"Package Control: Install Package"
			]
		],
		"width": 449.0
	},
	"console":
	{
		"height": 153.0,
		"history":
		[
			"import urllib.request,os,hashlib; h = '7183a2d3e96f11eeadd761d777e62404' + 'e330c659d4bb41d3bdf022e94cab3cd0'; pf = 'Package Control.sublime-package'; ipp = sublime.installed_packages_path(); urllib.request.install_opener( urllib.request.build_opener( urllib.request.ProxyHandler()) ); by = urllib.request.urlopen( 'http://sublime.wbond.net/' + pf.replace(' ', '%20')).read(); dh = hashlib.sha256(by).hexdigest(); print('Error validating download (got %s instead of %s), please try manual install' % (dh, h)) if dh != h else open(os.path.join( ipp, pf), 'wb' ).write(by) ",
			"import urllib2,os,hashlib; h = '7183a2d3e96f11eeadd761d777e62404' + 'e330c659d4bb41d3bdf022e94cab3cd0'; pf = 'Package Control.sublime-package'; ipp = sublime.installed_packages_path(); os.makedirs( ipp ) if not os.path.exists(ipp) else None; urllib2.install_opener( urllib2.build_opener( urllib2.ProxyHandler()) ); by = urllib2.urlopen( 'http://sublime.wbond.net/' + pf.replace(' ', '%20')).read(); dh = hashlib.sha256(by).hexdigest(); open( os.path.join( ipp, pf), 'wb' ).write(by) if dh == h else None; print('Error validating download (got %s instead of %s), please try manual install' % (dh, h) if dh != h else 'Please restart Sublime Text to finish installation') "
		]
	},
	"distraction_free":
	{
		"menu_visible": true,
		"show_minimap": false,
		"show_open_files": false,
		"show_tabs": false,
		"side_bar_visible": false,
		"status_bar_visible": false
	},
	"expanded_folders":
	[
		"/home/maciej/Copy Decrypted/Development/Projects/3chess"
	],
	"file_history":
	[
		"/home/maciej/Downloads/100247250556.sdx",
		"/home/maciej/Copy Decrypted/Development/Projects/3chess/README.md",
		"/home/maciej/Copy Decrypted/Development/Projects/3chess/example.py",
		"/home/maciej/Copy Decrypted/Development/Projects/3chess/eztext.py",
		"/home/maciej/.i3/config",
		"/home/maciej/Copy/Documents/Informatyka Studia/Semestr IV/INO/DataModels/RaportManager.cs",
		"/home/maciej/Copy/Documents/Informatyka Studia/Semestr IV/INO/DataModels/Raports.cs",
		"/home/maciej/Copy/Documents/Informatyka Studia/Semestr IV/INO/DataModels/AdminPanel.cs",
		"/home/maciej/Copy/Documents/Informatyka Studia/Semestr IV/INO/DataModels/TransactionManager.cs",
		"/home/maciej/Copy/Documents/Informatyka Studia/Semestr IV/INO/DataModels/PermissionManager.cs",
		"/home/maciej/Copy/Documents/Informatyka Studia/Semestr IV/INO/DataModels/UserPanel.cs",
		"/home/maciej/Copy/Documents/Informatyka Studia/Semestr IV/INO/DataModels/ImportExport.cs",
		"/home/maciej/Copy/Documents/Informatyka Studia/Semestr IV/INO/DataModels/MainScreen.cs",
		"/home/maciej/Copy/Documents/Informatyka Studia/Semestr IV/INO/DataModels/Main.cs",
		"/home/maciej/Copy/Documents/Informatyka Studia/Semestr IV/INO/DataModels/UserManager.cs",
		"/home/maciej/Copy/Documents/Informatyka Studia/Semestr IV/INO/DataModels/User.cs",
		"/home/maciej/Copy/Documents/Informatyka Studia/Semestr IV/INO/DataModels/Transaction.cs",
		"/home/maciej/Copy/Documents/Informatyka Studia/Semestr IV/INO/PermissionManager.cs",
		"/home/maciej/Copy/Documents/Informatyka Studia/Semestr IV/INO/ImportExport.cs",
		"/home/maciej/Copy/Documents/Informatyka Studia/Semestr IV/INO/MainScreen.cs",
		"/home/maciej/Copy/Documents/Informatyka Studia/Semestr IV/INO/Klasy/Swiatlo.java",
		"/home/maciej/Copy/Documents/Informatyka Studia/Semestr IV/INO/Main.cs",
		"/home/maciej/Copy/Documents/Informatyka Studia/Semestr IV/INO/UserManager.cs",
		"/home/maciej/Copy/Documents/Informatyka Studia/Semestr IV/INO/User.cs",
		"/home/maciej/Copy/Documents/Informatyka Studia/Semestr IV/INO/Transaction.cs",
		"/home/maciej/Copy/Documents/Informatyka Studia/Semestr IV/INO/RaportManager.cs",
		"/home/maciej/Copy/Documents/Informatyka Studia/Semestr IV/INO/TransactionManager.cs",
		"/home/maciej/Copy/Documents/Informatyka Studia/Semestr IV/INO/Raports.cs",
		"/home/maciej/Copy/Documents/Informatyka Studia/Semestr IV/INO/AdminPanel.cs",
		"/home/maciej/Copy/Documents/Informatyka Studia/Semestr IV/INO/UserPanel.cs",
		"/home/maciej/Copy/Documents/Informatyka Studia/Semestr IV/INO/Klasy/KOMPUTER.java",
		"/home/maciej/Copy/Documents/Informatyka Studia/Semestr IV/INO/Klasy/Okna.java",
		"/home/maciej/Copy/Documents/Informatyka Studia/Semestr IV/JPP/Prolog/zadania.pl",
		"/var/tmp/kdecache-maciej/krun/20680_0_INO1CD.txt",
		"/home/maciej/Copy/Documents/Informatyka Studia/Semestr IV/INO/Klasy/AktualizacjaSystemu.java",
		"/home/maciej/Copy/Documents/Informatyka Studia/Semestr IV/INO/Klasy/Temperatura.java",
		"/home/maciej/Copy/Documents/Informatyka Studia/Semestr IV/INO/Klasy/SystemPrzeciwpozarowy.java",
		"/home/maciej/Copy/Documents/Informatyka Studia/Semestr IV/INO/Klasy/SystemMonitorujacy.java",
		"/home/maciej/Copy/Documents/Informatyka Studia/Semestr IV/INO/Klasy/SystemKontroliDostepu.java",
		"/home/maciej/Copy/Documents/Informatyka Studia/Semestr IV/INO/Klasy/SystemAwaryjnegoZarzadzania.java",
		"/home/maciej/Copy/Documents/Informatyka Studia/Semestr IV/INO/Klasy/SystemAlarmowy.java",
		"/home/maciej/Copy/Documents/Informatyka Studia/Semestr IV/INO/Klasy/Budzik.java",
		"/home/maciej/Copy/Documents/Informatyka Studia/Semestr IV/INO/Klasy/FIRMA.java",
		"/home/maciej/Copy/Documents/Informatyka Studia/Semestr IV/INO/Klasy/Dokument.java",
		"/home/maciej/Copy/Documents/Informatyka Studia/Semestr IV/INO/Klasy/InstrukcjaObslugi.java",
		"/home/maciej/Copy/Documents/Informatyka Studia/Semestr IV/INO/Klasy/KsiazkaSerwisowa.java",
		"/home/maciej/Copy/Documents/Informatyka Studia/Semestr IV/INO/Klasy/MIESZKANIEC.java",
		"/home/maciej/Copy/Documents/Informatyka Studia/Semestr IV/INO/Klasy/PrzepelnionyKosz.java",
		"/home/maciej/Copy/Documents/Informatyka Studia/Semestr IV/INO/Klasy/Raport.java",
		"/home/maciej/Copy/Documents/Informatyka Studia/Semestr IV/INO/Klasy/Rolety.java",
		"/home/maciej/Copy/Documents/Informatyka Studia/Semestr IV/INO/Klasy/RtvAgd.java",
		"/home/maciej/Copy/Documents/Informatyka Studia/Semestr IV/INO/Klasy/SERWISANT.java",
		"/home/maciej/Copy/Documents/Informatyka Studia/Semestr IV/JPP/Prolog/zadanie10.pl",
		"/home/maciej/Copy/Documents/Informatyka Studia/Semestr IV/JPP/Prolog/zadanie9.pl",
		"/home/maciej/Copy/Documents/Informatyka Studia/Semestr IV/JPP/Prolog/zadanie8.pl",
		"/home/maciej/Copy/Documents/Informatyka Studia/Semestr IV/JPP/Prolog/zadanie7.pl",
		"/home/maciej/Copy/Documents/Informatyka Studia/Semestr IV/JPP/Prolog/zadanie6.pl",
		"/home/maciej/Copy/Documents/Informatyka Studia/Semestr IV/JPP/Prolog/zadanie5.pl",
		"/home/maciej/Copy/Documents/Informatyka Studia/Semestr IV/JPP/Prolog/zadanie4.pl",
		"/home/maciej/Copy/Documents/Informatyka Studia/Semestr IV/JPP/Prolog/zadanie3.pl",
		"/home/maciej/Copy/Documents/Informatyka Studia/Semestr IV/JPP/Prolog/zadanie2.pl",
		"/home/maciej/Copy/Documents/Informatyka Studia/Semestr IV/JPP/Prolog/zadanie1.pl",
		"/home/maciej/Copy/Documents/Informatyka Studia/UAM materiały/INO/Projekt/Maciej Pianowski DINO cz. 5/Klasy/AktualizacjaSystemu.java",
		"/home/maciej/Copy/Documents/Informatyka Studia/UAM materiały/INO/Projekt/Maciej Pianowski DINO cz. 5/Klasy/Raport.java",
		"/home/maciej/Copy/Documents/Informatyka Studia/UAM materiały/INO/Projekt/Maciej Pianowski DINO cz. 5/Klasy/Budzik.java",
		"/home/maciej/Copy/Documents/Informatyka Studia/UAM materiały/INO/Projekt/Maciej Pianowski DINO cz. 5/Klasy/Dokument.java",
		"/home/maciej/Copy/Documents/Informatyka Studia/UAM materiały/INO/Projekt/Maciej Pianowski DINO cz. 5/Klasy/Temperatura.java",
		"/home/maciej/Copy/Documents/Informatyka Studia/UAM materiały/INO/Projekt/Maciej Pianowski DINO cz. 5/Klasy/SystemPrzeciwpozarowy.java",
		"/home/maciej/Copy/Documents/Informatyka Studia/UAM materiały/INO/Projekt/Maciej Pianowski DINO cz. 5/Klasy/KOMPUTER.java",
		"/home/maciej/Copy/Documents/Informatyka Studia/UAM materiały/INO/Projekt/Maciej Pianowski DINO cz. 5/Klasy/RtvAgd.java",
		"/home/maciej/Copy/Documents/Informatyka Studia/UAM materiały/INO/Projekt/Maciej Pianowski DINO cz. 5/Klasy/InstrukcjaObslugi.java",
		"/home/maciej/Copy/Documents/Informatyka Studia/Semestr IV/JPP/nty.hs",
		"/home/maciej/Copy/Documents/Informatyka Studia/Semestr IV/JPP/MaciejSobolewski.hs",
		"/home/maciej/Copy/Documents/Informatyka Studia/Semestr IV/JPP/ile.hs",
		"/home/maciej/Copy/Documents/Informatyka Studia/Semestr IV/JPP/kwadratb.hs",
		"/home/maciej/Copy/Documents/Informatyka Studia/Semestr IV/JPP/kwadrata.hs",
		"/home/maciej/Copy/Documents/Informatyka Studia/Semestr IV/JPP/parzysta.hs",
		"/home/maciej/Copy/Documents/Informatyka Studia/Semestr IV/JPP/dodatnie.hs",
		"/home/maciej/Copy/Documents/Informatyka Studia/Semestr IV/JPP/odwrotny.hs",
		"/home/maciej/Copy/Documents/Informatyka Studia/Semestr IV/JPP/ostatnipierwszym.hs",
		"/home/maciej/Copy/Documents/Informatyka Studia/Semestr IV/JPP/trzeci.hs",
		"/home/maciej/Copy/Documents/Informatyka Studia/Semestr IV/JPP/drugi.hs",
		"/home/maciej/Copy/Documents/Informatyka Studia/Semestr IV/JPP/przedostatni.hs",
		"/home/maciej/Copy/Documents/Informatyka Studia/Semestr IV/JPP/potega.hs",
		"/home/maciej/Copy/Development/Projects/3chess/3chess.py",
		"/home/maciej/Copy/Development/Projects/3chess/TO_DO",
		"/home/maciej/Copy/Development/Projects/3chess/changelog",
		"/home/maciej/Copy/Development/Projects/3chess/.git/COMMIT_EDITMSG",
		"/home/maciej/Copy/Development/Projects/3chess/example.py",
		"/home/maciej/Copy/Development/Projects/3chess/eztext.py",
		"/home/maciej/Copy/Development/Projects/3chess/.git/MERGE_MSG",
		"/home/maciej/Development/Projects/3chess/changelog",
		"/home/maciej/Copy Decrypted/Development/Projects/3chess/changelog",
		"/home/maciej/Copy Decrypted/Development/Projects/3chess/TO_DO",
		"/home/maciej/Copy Decrypted/Development/Projects/3chess_new/license",
		"/home/maciej/Copy Decrypted/Development/Projects/3chess_new/changelog",
		"/home/maciej/Copy Decrypted/Development/Projects/3chess_new/dev_img/colours",
		"/home/maciej/.cache/.fr-8LqEOy/glyph-2.6.5b/setup.py",
		"/home/maciej/Downloads/glyph-2.6.5b/setup.py",
		"/home/maciej/Copy Decrypted/Development/Projects/Moj Pyton/pyton.py",
		"/home/maciej/Downloads/praca",
		"/home/maciej/Downloads/call 2/serial call 2.txt",
		"/home/maciej/Copy Decrypted/Development/Projects/3chess_new/TO_DO",
		"/var/tmp/kdecache-maciej/krun/3431_0_videoRotation.cpp",
		"/home/maciej/lab3/videoRotation.cpp",
		"/home/maciej/Development/Projects/3chess_new/3chess.py",
		"/home/maciej/Downloads/loadImage.c",
		"/home/maciej/Downloads/compile.sh",
		"/var/tmp/kdecache-maciej/krun/3356_0_compile.sh",
		"/var/tmp/kdecache-maciej/krun/3316_0_loadImage.c",
		"/home/maciej/Downloads/cv.h",
		"/home/maciej/Development/Projects/KCK/08/generator/src/generator/Generator.java",
		"/home/maciej/Development/Projects/KCK/07/kck/generator/src/generator/Generator.java",
		"/home/maciej/Development/Projects/3chess/3chess.py",
		"/home/maciej/Copy/Development/Projects/3chess/res_conf/1280x960.res",
		"/home/maciej/Copy/Development/Projects/3chess/1024x720.conf",
		"/home/maciej/Copy/Development/Projects/3chess/1280x960.conf",
		"/home/maciej/Development/Projects/Moj Pyton/pyton.py",
		"/home/maciej/Copy/Development/Django/lwc/templates/base.html",
		"/home/maciej/Copy/Development/Django/lwc/templates/share.html",
		"/home/maciej/Copy/Development/Django/lwc/lwc/views.py",
		"/home/maciej/Copy/Development/Django/lwc/templates/donotuse.html",
		"/home/maciej/Copy/Development/Django/lwc/lwc/urls.py",
		"/home/maciej/Copy/Development/Django/lwc/templates/home.html",
		"/home/maciej/Downloads/Snatch (2000)/Snatch.2000.BRRip.txt",
		"/home/maciej/Downloads/Dostojewski Biesy",
		"/home/maciej/Downloads/Dostojewski Biesy.txt",
		"/home/maciej/Copy/Development/Django/lwc/appka/models.py"
	],
	"find":
	{
		"height": 35.0
	},
	"find_in_files":
	{
		"height": 93.0,
		"where_history":
		[
			"/home/maciej/Development/Django/lwc/appka"
		]
	},
	"find_state":
	{
		"case_sensitive": false,
		"find_history":
		[
			"resolution_button",
			"pawng1",
			"newgame",
			";\n",
			"delete",
			"indexof",
			"a",
			"choose",
			"split",
			"self",
			"choose",
			"nextTurn",
			"choose",
			"['english']",
			"definelan",
			"ld[lang][",
			"board",
			"board.png",
			"save",
			"()",
			"save_button",
			"screen",
			"load",
			"undo",
			"pickle",
			"name",
			"board",
			"playerDisplay",
			"fpsTime",
			" '}",
			"print",
			"print out",
			"undo",
			"kill",
			"kills",
			"kill",
			"printCon",
			"self)",
			"history",
			"out",
			"killed",
			"kill",
			"out",
			"define",
			"surface",
			"black",
			"to",
			"langdict",
			"language",
			"testRe",
			"findSq",
			"runGame",
			"][1]",
			"square[",
			"castel",
			"pawnw",
			"L11",
			"pawnb",
			"pionek",
			"pionek\n",
			";\n",
			"I6",
			"])\n",
			"res_y",
			"pionek2",
			"find",
			"board_res",
			"findSquares",
			"pionek",
			"square_colour",
			":\n",
			"color",
			"board_color",
			"plaeyDisplay",
			"setDisp",
			"bg",
			"¯",
			"¿",
			"Ÿ",
			"œ",
			"æ",
			"¹",
			"³",
			"ê",
			"</hr>",
			"6",
			"10",
			"3",
			"frind_id",
			")\n",
			"print",
			"get_or_create",
			"<h1>Welcome</h1>",
			"\n    global fpsTime\n    global setDisplay\n\n    fpsTime = pygame.time.Clock()\n    setDisplay = pygame.display.set_mode((resWidth,resHeight))\n    pygame.display.set_caption('controlling')\n    runGame()"
		],
		"highlight": true,
		"in_selection": false,
		"preserve_case": false,
		"regex": false,
		"replace_history":
		[
			"usun",
			"nty",
			"ld",
			"lang",
			"",
			"rook",
			"pawnr",
			"pawnw",
			"pawnb",
			"pawng",
			"res_x",
			"Ż",
			"ż",
			"ź",
			"ś",
			"ć",
			"ą",
			"ł",
			"ę"
		],
		"reverse": false,
		"show_context": true,
		"use_buffer2": true,
		"whole_word": false,
		"wrap": true
	},
	"groups":
	[
		{
			"selected": 1,
			"sheets":
			[
				{
					"buffer": 0,
					"file": "3chess.py",
					"semi_transient": false,
					"settings":
					{
						"buffer_size": 34575,
						"regions":
						{
						},
						"selection":
						[
							[
								2753,
								2753
							]
						],
						"settings":
						{
							"syntax": "Packages/Python/Python.tmLanguage",
							"tab_size": 4,
							"translate_tabs_to_spaces": true
						},
						"translation.x": 0.0,
						"translation.y": 1084.0,
						"zoom_level": 1.0
					},
					"stack_index": 1,
					"type": "text"
				},
				{
					"buffer": 1,
					"file": "/home/maciej/Downloads/SU29",
					"semi_transient": false,
					"settings":
					{
						"buffer_size": 835,
						"regions":
						{
						},
						"selection":
						[
							[
								585,
								585
							]
						],
						"settings":
						{
							"syntax": "Packages/Text/Plain text.tmLanguage"
						},
						"translation.x": 0.0,
						"translation.y": 0.0,
						"zoom_level": 1.0
					},
					"stack_index": 0,
					"type": "text"
				},
				{
					"buffer": 2,
					"file": "TO_DO",
					"semi_transient": false,
					"settings":
					{
						"buffer_size": 211,
						"regions":
						{
						},
						"selection":
						[
							[
								167,
								167
							]
						],
						"settings":
						{
							"syntax": "Packages/Text/Plain text.tmLanguage"
						},
						"translation.x": 0.0,
						"translation.y": 0.0,
						"zoom_level": 1.0
					},
					"stack_index": 2,
					"type": "text"
				}
			]
		}
	],
	"incremental_find":
	{
		"height": 27.0
	},
	"input":
	{
		"height": 35.0
	},
	"layout":
	{
		"cells":
		[
			[
				0,
				0,
				1,
				1
			]
		],
		"cols":
		[
			0.0,
			1.0
		],
		"rows":
		[
			0.0,
			1.0
		]
	},
	"menu_visible": true,
	"output.exec":
	{
		"height": 155.0
	},
	"output.find_results":
	{
		"height": 0.0
	},
	"pinned_build_system": "",
	"project": "3chess.sublime-project",
	"replace":
	{
		"height": 64.0
	},
	"save_all_on_build": true,
	"select_file":
	{
		"height": 0.0,
		"last_filter": "",
		"selected_items":
		[
		],
		"width": 0.0
	},
	"select_project":
	{
		"height": 0.0,
		"last_filter": "",
		"selected_items":
		[
		],
		"width": 0.0
	},
	"select_symbol":
	{
		"height": 0.0,
		"last_filter": "",
		"selected_items":
		[
		],
		"width": 0.0
	},
	"selected_group": 0,
	"settings":
	{
	},
	"show_minimap": false,
	"show_open_files": true,
	"show_tabs": true,
	"side_bar_visible": true,
	"side_bar_width": 162.0,
	"status_bar_visible": true,
	"template_settings":
	{
	}
}
